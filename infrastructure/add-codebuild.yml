AWSTemplateFormatVersion: '2010-09-09'
Description: 'LambdaDeploy Pipeline - Add CodeBuild'

Parameters:
  ArtifactBucketName:
    Type: String
    Description: S3 bucket for pipeline artifacts
    Default: lambdadeploy-artifacts

Resources:
  # S3 Bucket for Pipeline Artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ArtifactBucketName}-codebuild-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeBuildServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub "${ArtifactBucket}/*"

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "lambdadeploy-build-${AWS::StackName}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
              commands:
                - echo "CodeBuild project created successfully!"
            build:
              commands:
                - echo "Build phase - ready for CI/CD"
                - echo "Current date: $(date)"
            post_build:
              commands:
                - echo "Build completed successfully"

  # Lambda Function for Testing
  TestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "test-lambda-${AWS::StackName}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole-lambdadeploy-pipeline-dev"
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({
                message: 'Phase 4 - CodeBuild integration successful!',
                timestamp: new Date().toISOString(),
                buildProject: 'Ready for CI/CD'
              })
            };
          };

Outputs:
  ArtifactBucketName:
    Description: Name of the S3 artifact bucket
    Value: !Ref ArtifactBucket

  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref CodeBuildProject

  TestLambdaArn:
    Description: ARN of the test Lambda function
    Value: !GetAtt TestLambda.Arn